#include<map>
#include<list>
#include<string>

#include<cstdlib>

#include<iostream>

#include<experimental/filesystem>

#include"dir_iterator_size_hash_insert.h"

namespace fs=experimental::filesystem;

using namespace std;

void user_interface(map < int, list < string > >*duplicats)
{
	string command;
	int num_pos;
	bool flag;

    for (map < int, list < string > >::iterator iti = duplicats->begin();
         iti != duplicats->end(); iti++) {

	cout<<endl;
	num_pos=0;

        for (list < string >::iterator uti = iti->second.begin();
		uti != iti->second.end(); uti++){
		
		num_pos++;
		cout<<"["<<num_pos<<"]"<<": "<< *uti << endl;
	}

	flag=false;

	while(!flag){

		cout<<endl;
		cout<<"Set "<<iti->first<<" of "<<duplicats->size()<<", preserve files [1 - "<<iti->second.size()<<", all]: ";
		cin >> command;
		cout<<endl;
	
		if(command=="all"){
			flag=true;
		}else if(atoi(command.c_str())>=1 && atoi(command.c_str())<=iti->second.size()){
			flag=true;
		}else{
			cout<<"Wrong command.Try again."<<endl;
		}
	}

	num_pos=0;	

	for (list < string >::iterator uti = iti->second.begin();
		uti != iti->second.end(); uti++){

		if(command=="all"){	
			cout<<"[+]"<<": "<< *uti << endl;
		}else{
			num_pos++;
			if(num_pos==atoi(command.c_str())){
				cout<<"[+]"<<": "<< *uti << endl;		
				continue;
			}
			
			fs::remove(*uti);
			cout<<"[-]"<<": "<< *uti << endl;

		}
		
	}

	cout<<endl;
	cout<<"========="<<endl;
	
    }

cout<<endl;
cout<<"There are no duplicates in this directory and its subdirectories"<<endl;
cout<<endl;

}
