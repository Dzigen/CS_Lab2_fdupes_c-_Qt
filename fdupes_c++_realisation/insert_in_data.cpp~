#include <map>
#include <list>
#include <string>

#include "dir_iterator_size_hash_insert.h"

using namespace std;

void insert_in_data(string name, long size, long hash, map < int,
                    map < int, list < string > > >*data_base_files)
{

    /*дополнительные структуры для добавления в data_base_files */
    map < int, list < string > >hash_lvl;
    list < string > path_lvl;

    /*итератор для обхода разделов  на уровне размеров файлов */
    map < int, map < int, list < string > > >::iterator it =
        data_base_files->find(size);

    /*проверка на существование раздела с файлами такого же размера */
    if (it != data_base_files->end()) {

        /*итератор для обхода разделов на уровне хэшей файлов */
        map < int, list < string > >::iterator iti = it->second.find(hash);

        /*проверка на существования раздела с файлами с таким же хэшем */
        if (iti != it->second.end()) {

            /**
			  *записываем путь файла в существующий раздел для данного размера и
			  *существующий раздел для данного хэша файла
			  */
            iti->second.push_back(name);


        } else {

            /**
			   *создаём новый раздел для данного хэша файла и 
			   *записываем данный раздел в существующий раздел для данного размера файла
			   */
            path_lvl.push_back(name);

            it->second.insert(pair < int,
                              list < string > >(hash, path_lvl));
        }

    } else {

        /**
		  *создаём новый раздел для данного размера файла и
		  * в нём моздаём новый раздел для данного хэша куда записываем путь данного файла
		   */
        path_lvl.push_back(name);
        hash_lvl.insert(pair < int, list < string > >(hash, path_lvl));

        data_base_files->insert(pair < int, map < int,
                                list < string > > >(size, hash_lvl));

    }

}
